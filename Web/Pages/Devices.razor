
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims;
@using  Web.Services
@using  SharedLibrary

@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager

@inject DevicesService devicesServices
@inject HttpClient client
@inject UserAuthService uas





<h3>Devices</h3>
<AuthorizeView>
    <Authorized>
        <div class="container">
            @if(ud == null)
            {
                <div class="container">
                    <p>No Profile device registered</p>
                    <div>
                        <button class="btn btn-primary" @onclick="@(async () => await RegisterProfile())">Register your profile</button>
                    </div>
                    

                </div>
            }
            else
            {
                <div class="container">
                    <div class="row">
                        <div>
                            <p>creation Date : @ud?.CreationDate</p>
                        </div>
                    </div>
                </div>
            }
        </div>


        <div class="container">
            <button class="btn btn-success" @onclick="@PrintWebApiResponse">Fetch Results</button>
            <button class="btn btn-secondary" @onclick="@RequestApi">Give api</button>
            <button class="btn btn-secondary" @onclick="@writeToConsole">Show User ID</button>
            <button class="btn btn-secondary" @onclick=@(() => setUserId(context.User))>Set User Id</button>

        </div>

    </Authorized>
</AuthorizeView>



@code {
[Parameter]
ClaimsPrincipal userclaims { get; set; }

UserDevice ud;
string UserId;

//protected override async Task OnInitAsync()
//{


//    //Console.WriteLine($"Value of cascaded {userclaims.Identity.Name}");
//    ////var userid = UserManager.GetUserId(state.User);
//    //Console.WriteLine($"Le super USER EST = ${UserId}");
//    //PrintWebApiResponse();
//    //RequestBl();



//}
protected override async Task OnInitAsync()
{

    setUserId2();
    await RequestApi();
}
private async Task PrintWebApiResponse()
{
    var response = await client.GetStringAsync("/api/UserDevices");
    Console.WriteLine($"Reponse pour la requete {response}");
}

private async Task RequestBl()
{

    ud = await devicesServices.GetUserDevices(UserId);
    Console.WriteLine($"UserDevice {ud.ToString()}");
}
private async Task RequestApi()
{
    ud = await devicesServices.GetUserDevices(UserId);
    Console.WriteLine($"UserDevice {ud.ToString()}");

}
private async Task writeToConsole()
{
    Console.WriteLine($"User id = {UserId}");
}
private async Task setUserId2()
{
    try
    {
        UserId = uas.getUserId(userclaims);
    }
    catch(Exception e)
    {
        Console.WriteLine($"Erreur : {e.ToString()}");
    }
}

private void setUserId(ClaimsPrincipal user)
{
    UserId = UserManager.GetUserId(user);
    Console.WriteLine($"L'userId possède {UserId} - {user.Identity.Name}");
}
private async Task RegisterProfile()
{

    ud = new UserDevice();


    try
    {
        await devicesServices.CreateUserDeviceAsync(UserId);
    }
    catch(Exception e)
    {
        Console.WriteLine($"Erreur \n {e}");
    }
}



}
