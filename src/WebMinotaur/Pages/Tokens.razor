@page "/tokens"

@attribute [Authorize]
@inject IUserAuthService userAuthService
@inject IAppUserTokensRepository appUserTokenRepository
@inject ITokenService tokenService
@inject ClipboardService clipboard
@inject IMatToaster Toaster
<h3>Tokens</h3>
<div class="text-right">
    <MatButton Outlined="true" @onclick="@(async () => await refreshTokens())">Refresh</MatButton>
    <MatButton Raised="true" Outlined="true" @onclick="@(async () => await NewTokenClicked())">New</MatButton>
</div>

@if (tokens.Count > 0)
{
    <MatTable Items="tokens">
        <MatTableHeader>
            <th>Creation Date</th>
            <th>Expiration Date</th>
            <th>Actions</th>
        </MatTableHeader>
        <MatTableRow>
            <td>@context.CreationDate.ToLocalTime()</td>
            <td>@context.ExpirationDate.ToLocalTime()</td>
            <td>

                <MatButton Outlined="true" @onclick="@(() => showTokenClicked(context))">Show</MatButton>
                <MatButton Outlined="true" @onclick="@(async () => await DeleteTokenClicked(context))">Delete</MatButton>
            </td>
        </MatTableRow>
    </MatTable>
}
else
{
    <p>No Token Registered</p>
}
<MatDialog IsOpen="showTokenDialog">
    <MatDialogTitle>Show token</MatDialogTitle>
    <MatDialogContent>
        <div class="card">
            <div class="card-body">
                <p>@selectedToken.Id</p>
            </div>
        </div>
    </MatDialogContent>
    <MatDialogActions>
        <MatButton Outlined="true" @onclick="@(() => showTokenDialog = false)">Close</MatButton>
        <MatButton Raised="true" @onclick="@(async () => await CopyToClipboardClicked())">Copy to clipboard</MatButton>
    </MatDialogActions>
</MatDialog>

@code {
    [CascadingParameter]
    Task<AuthenticationState> authStateTask { get; set; }
    List<AppUserToken> tokens { get; set; } = new List<AppUserToken>();
    UserInfo userInfo { get; set; } = new UserInfo();
    bool showTokenDialog = false;
    AppUserToken selectedToken { get; set; } = new AppUserToken();



    protected override async Task OnInitAsync()
    {
        await setUserId();
        await setUsername();
        await refreshTokens();
    }
    async Task setUserId()
    {
        var authstate = await authStateTask;
        userInfo = new UserInfo();
        userInfo.UserId = userAuthService.GetUserId(authstate.User);
    }
    async Task setUsername()
    {
        var authstate = await authStateTask;
        userInfo.Username = authstate.User.Identity.Name;
    }
    async Task refreshTokens()
    {
        tokens = await appUserTokenRepository.GetAllByUserIdAsync(userInfo.UserId);
    }
    async Task NewTokenClicked()
    {
        var token = tokenService.GenerateToken(userInfo.Username);
        var appUserTK = new AppUserToken
        {
            Id = tokenService.IntoString(token),
            CreationDate = DateTime.UtcNow,
            ExpirationDate = token.ValidTo,
            AppUserId = userInfo.UserId

        };
        await appUserTokenRepository.CreateAsync(appUserTK);
        await refreshTokens();

    }
    void showTokenClicked(AppUserToken token)
    {
        selectedToken = token;
        showTokenDialog = true;
    }
    async Task DeleteTokenClicked(AppUserToken token)
    {
        await appUserTokenRepository.DeleteAsync(token.Id);
        await refreshTokens();
    }
    async Task CopyToClipboardClicked()
    {
        await clipboard.WriteTextAsync(selectedToken.Id);
        Toaster.Add("Toast body text", MatToastType.Primary, "code");
    }

}
