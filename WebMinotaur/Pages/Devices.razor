@page "/devices"
@attribute [Authorize]

@inject IUserAuthService userAuthService
@inject IDevicesRepository devicesRepository

<h3>Devices</h3>
<div class="text-right">
    <MatButton Outlined="true" @onclick="@(async () => await refreshDevices())">Refresh</MatButton>
    <MatButton Raised="true" Outlined="true" @onclick="@(() => newClicked() )">New</MatButton>
</div>

@if (devices.Count > 0)
{
<div>
    <MatTable Items="devices">
        <MatTableHeader>
            <th>Name</th>
            <th>Actions</th>
        </MatTableHeader>
        <MatTableRow>
            <td>@context.Name</td>
            <td>
                <MatButton Outlined="true" @onclick="@( () => editClicked(@context))">Edit</MatButton>
                <MatButton Outlined="true" >Details</MatButton>
                <MatButton Outlined="true" @onclick="@( () => deleteClicked(@context))">Delete</MatButton>
            </td>
        </MatTableRow>
    </MatTable>
</div>
}
else
{
    <p>No device registered yet!</p>
}
<MatDialog IsOpen="showEditDialog">
    <MatDialogTitle>Device @mode.ToString()</MatDialogTitle>
    <MatDialogContent>
        <MatCard>
            <MatTextField @bind-Value="@deviceSelected.Name" HelperText="Name"></MatTextField>
            <MatTextField @bind-Value="@deviceSelected.Description" HelperText="Description"></MatTextField>
        </MatCard>
    </MatDialogContent>
    <MatDialogActions>
        <MatButton Outlined="true" @onclick="@(async () => await ValidateClicked())">Validate</MatButton>
        <MatButton Raised="true" OnClick="@(() => showEditDialog = false)">Cancel</MatButton>
    </MatDialogActions>
</MatDialog>

<MatDialog IsOpen="showDeleteDialog">
    <MatDialogTitle>Confirm Delete</MatDialogTitle>
    <MatDialogContent>
        <MatCard>
            <p>Delete this device:</p>
            <p>@deviceSelected.Name</p>
        </MatCard>
    </MatDialogContent>
    <MatDialogActions>
        <MatButton>Confirm</MatButton>
        <MatButton>Cancel</MatButton>
    </MatDialogActions>
</MatDialog>

@code {
    [CascadingParameter]
    Task<AuthenticationState> authStateTask { get; set; }
    List<Device> devices { get; set; } = new List<Device>();
    Device deviceSelected { get; set; } = new Device();
    UserInfo userInfo { get; set; }
    FormMode mode { get; set; }
    bool showEditDialog = false;
    bool showDeleteDialog = false;

    protected override async Task OnInitAsync()
    {
        await setUserId();
        await setUsername();
        await refreshDevices();
    }
    async Task setUserId()
    {
        var authstate = await authStateTask;
        userInfo = new UserInfo();
        userInfo.UserId = userAuthService.GetUserId(authstate.User);

    }
    async Task setUsername()
    {
        var authstate = await authStateTask;
        userInfo.Username = authstate.User.Identity.Name;
    }
    async Task refreshDevices()
    {
        devices = await devicesRepository.GetDevicesAsyncByUserId(userInfo.UserId);
    }
    void editClicked(Device d)
    {
        mode = FormMode.Edit;
        deviceSelected = d;
        showEditDialog = true;

    }
    void newClicked()
    {
        mode = FormMode.Create;
        deviceSelected = new Device();
        showEditDialog = true;
    }
    async Task ValidateClicked()
    {
        switch(mode)
        {
            case FormMode.Create:
                await devicesRepository.AddDeviceAsync(deviceSelected);
                break;
            case FormMode.Edit:
                await devicesRepository.UpdateDeviceAsync(deviceSelected);
                break;
            default:
                Console.WriteLine("Err");
                break;

                //Todo: Toast                
        }
        showEditDialog = false;
        await refreshDevices();
    }
    void deleteClicked(Device d)
    {
        deviceSelected = d;
        showDeleteDialog = true;
    }

}
