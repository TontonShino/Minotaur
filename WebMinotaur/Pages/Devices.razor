@page "/devices"

@attribute [Authorize]


@inject IUserAuthService userAuthService
@inject ITokenService tokenService
@inject IDevicesRepository deviceRepo
@inject IDeviceTokensRepository deviceTokensRepository

<h3>Devices</h3>
<hr />
<div>
    <h4>Registered devices</h4>
    @if (devices.Count == 0)
    {
        <div>
            <p>No devices registered add device name & description.</p>
        </div>
    }
    else
    {
        <br />
        <div>
            <MatTable Items="@devices" Striped="true">
                <MatTableHeader>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Actions</th>
                </MatTableHeader>
                <MatTableRow>
                    <td>@context.Id</td>
                    <td>@context.Name</td>
                    <td>
                        <MatButton Outlined="true" @onclick="@(() => EditDevice(context) )">Edit</MatButton>
                        <MatButton Outlined="true">Tokens</MatButton>
                        <MatButton Outlined="true" @onclick="@(() => DeviceDetails(context))">Details</MatButton>
                        <MatButton Outlined="true" @onclick="@(async () => await RemoveDeviceAsync(@context.Id))">Delete</MatButton>
                    </td>
                </MatTableRow>
            </MatTable>
        </div>
        <br />
    }
</div>

<devicedetails device="@deviceDetails" />

<br />



    <devicecreate device="@deviceEdit" OnValidate="@ValidateDevice" mode="@mode" />






@code
{


    [CascadingParameter]
    Task<AuthenticationState> authenticationStateTask { get; set; }
    string username { get; set; }
    string userId { get; set; }
    Device deviceEdit = new Device();
    Device deviceDetails { get; set; }
    List<Device> devices { get; set; }
    FormMode mode = FormMode.Create;

    protected override async Task OnInitAsync()
    {
        await setUserId();
        await refreshDevices();
    }

    async Task addDevice()
    {
        await deviceRepo.AddDeviceAsync(deviceEdit);

        //Generate tokens
        var token = tokenService.GenerateTokenDevice(username);
        //Register tokens (db)
        var deviceToken = new DeviceToken
        {
            Id = tokenService.IntoString(token),
            DeviceId = deviceEdit.Id,
            Enabled = true,
            CreationDate = DateTime.UtcNow,
            ExpirationDate = token.ValidTo
        };

        await deviceTokensRepository.CreateAsync(deviceToken);
        await refreshDevices();
        deviceEdit = new Device { AppUserId = userId };
    }
    async Task refreshDevices()
    {
        devices = await deviceRepo.GetDevicesAsyncByUserId(userId) ?? null;
    }
    async Task setUserId()
    {
        var authState = await authenticationStateTask;
        username = authState.User.Identity.Name;
        var user = authState.User;
        userId = userAuthService.GetUserId(user);
        deviceEdit.AppUserId = userId;
    }
    async Task RemoveDeviceAsync(string id)
    {
        await deviceRepo.DeleteDeviceAsync(id);
        await refreshDevices();
    }

    void DeviceDetails(Device device)
    {
        deviceDetails = device;
    }
    async Task createTokenDeviceAsync()
    {

    }
    async Task ChildValidatedDevice()
    {

    }
    async Task ValidateDevice()
    {
        //From mode selected we do action

        //If mode create 
        //Add device

        //If mode edit
        //update to db
        await addDevice();
    }
    async Task updateDevice()
    {

    }
    void EditDevice(Device device)
    {
        mode = FormMode.Edit;
        deviceEdit = device;
    }
}
