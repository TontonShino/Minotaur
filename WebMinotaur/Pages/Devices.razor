@page "/devices"

@attribute [Authorize]
@using MatBlazor

@inject IDevicesService devicesService
@inject IUserAuthService userAuthService
@inject ITokenService tokenService
@inject IDevicesRepository deviceRepo
@inject IUriHelper uriHelper
@inject IDeviceTokensRepository deviceTokensRepository


<h3>Devices</h3>
<hr />
<div class="container">
    <h4>Registered devices</h4>
    @if (devices.Count == 0)
    {
        <div>
            <p>No devices registered add device name & description.</p>
        </div>
    }
    else
    {
        <br />
        <div>
            <MatTable Items="@devices">
                <MatTableHeader>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Actions</th>
                </MatTableHeader>
                <MatTableRow>
                    <td>@context.Id</td>
                    <td>@context.Name</td>
                    <td>
                        <MatButton Outlined="true">Edit</MatButton>
                        <MatButton Outlined="true">Show Tokens</MatButton>
                        <MatButton Outlined="true" @onclick="@(() => DeviceDetails(context))">Details</MatButton>
                        <MatButton Outlined="true" @onclick="@(async () => await RemoveDeviceAsync(context.Id))">Delete</MatButton>
                    </td>
                </MatTableRow>
            </MatTable>
        </div>
        <br />
    }
</div>
<div class="container">
    <devicedetails device="@deviceDetails" />
</div>
<br />

<div class="container">
    <devicecreate device="@deviceEdit" OnValidate="@ValidateDevice" />
</div>

@code
{

    [CascadingParameter]
    Task<AuthenticationState> authenticationStateTask { get; set; }
    string username;
    string userId;
    Device deviceEdit = new Device();
    Device deviceDetails;
    List<Device> devices;

    protected override async Task OnInitAsync()
    {

        await setUserId();
        await refreshDevices();
    }

    async Task addDevice()
    {
        await deviceRepo.AddDeviceAsync(deviceEdit);


        //Generate tokens
        var token = tokenService.GenerateTokenDevice(username);
        //Register tokens (db)
        var tkd = new DeviceToken
        {
            Id = token.ToString(),
            DeviceId = deviceEdit.Id,
            Enabled = true,
            CreationDate = DateTime.UtcNow,
            ExpirationDate = token.ValidTo
        };

        await deviceTokensRepository.CreateAsync(tkd);
        await refreshDevices();
        deviceEdit = new Device { AppUserId = userId };
    }
    async Task refreshDevices()
    {
        devices = await deviceRepo.GetDevicesAsyncByUserId(userId) ?? null;
    }
    async Task setUserId()
    {
        var authState = await authenticationStateTask;
        username = authState.User.Identity.Name;
        var user = authState.User;
        userId = userAuthService.GetUserId(user);
        deviceEdit.AppUserId = userId;
    }
    async Task RemoveDeviceAsync(string id)
    {
        await deviceRepo.DeleteDeviceAsync(id);
        await refreshDevices();
    }

    void DeviceDetails(Device device)
    {
        deviceDetails = device;
    }
    async Task createTokenDeviceAsync()
    {

    }
    async Task ChildValidatedDevice()
    {

    }
    async Task ValidateDevice()
    {
        await addDevice();

    }
}
