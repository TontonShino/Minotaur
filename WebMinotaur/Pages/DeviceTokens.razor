@page "/devicestk"


@attribute [Authorize]

@inject IUserAuthService userAuthService
@inject IDeviceTokensRepository deviceTokensRepository

<h3>Tokens</h3>

<div class="container">
    <div class="table-responsive">
        <MatTable Items="@deviceTokens">
            <MatTableHeader>
                <th>Device ID</th>
                <th>Enabled</th>
                <th>Expiration</th>
                <th>Actions</th>
            </MatTableHeader>
            <MatTableRow>
                <td>@context.DeviceId</td>
                <td>@context.Enabled</td>
                <td>@context.ExpirationDate</td>
                <td>
                    <MatButton Outlined="true" @onclick="@(() => setTokenToShow(@context.Id) )">Show</MatButton>
                    @if (context.Enabled == true)
                    {
                        <MatButton Outlined="true">Disable</MatButton>
                    }
                    else if (context.Enabled == false)
                    {
                        <MatButton Outlined="true">Enable</MatButton>
                    }
                    <MatButton Outlined="true">Remove</MatButton>

                </td>
            </MatTableRow>
        </MatTable>
    </div>
    <MatDialog @bind-IsOpen="@showTokenDialog">
        <MatDialogContent>
            <p>This is your JWT Token</p>
            <MatCard>
                <p>@tokenValue</p>
            </MatCard>
            <MatTextField @bind-Value="@tokenValue" Disabled="true"/>
        </MatDialogContent>
        <MatDialogActions>
            <MatButton @onclick="@closeTokenDialog">Close</MatButton>
        </MatDialogActions>
    </MatDialog>
</div>
@code {
    [CascadingParameter]
    Task<AuthenticationState> authState { get; set; }

    bool showTokenDialog { get; set; } = false;
    string tokenValue { get; set; }


    string userId { get; set; }
    string username { get; set; }
    List<DeviceToken> deviceTokens { get; set; } = new List<DeviceToken>();

    protected override async Task OnInitAsync()
    {
        await setUserId();
        refreshDeviceTokenList();
    }
    async Task setUserId()
    {
        var taskAuth = await authState;
        var user = taskAuth.User;
        username = taskAuth.User.Identity.Name;
        userId = userAuthService.GetUserId(user);
    }
    void refreshDeviceTokenList()
    {
        deviceTokens = deviceTokensRepository.GetAllByUserId(userId);
    }
    void setTokenToShow(string tk)
    {
        tokenValue = tk;
        openTokenDialog();
    }
    void openTokenDialog()
    {
        showTokenDialog = true;
    }
    void closeTokenDialog()
    {
        showTokenDialog = false;
    }
}
