@page "/devicestk"

@attribute [Authorize]

@inject IUserAuthService userAuthService
@inject IDeviceTokensRepository deviceTokensRepository
@inject IDevicesRepository deviceRepository
@inject ITokenService tokenService

<h3>Tokens</h3>

<div class="container">
    <div class="table-responsive">
        <MatTable Items="@deviceTokens">
            <MatTableHeader>
                <th>Device Name</th>
                <th>Enabled</th>
                <th>Expiration</th>
                <th>Actions</th>
            </MatTableHeader>
            <MatTableRow>
                <td>@context.Device.Name</td>
                <td>@context.Enabled</td>
                <td>@context.ExpirationDate</td>
                <td>
                    <MatButton Outlined="true" @onclick="@(() => setTokenToShow(@context.Id) )">Show</MatButton>
                    @if (context.Enabled == true)
                    {
                        <MatButton Outlined="true" @onclick="@(async ()=> await DisableToken(@context.Id))">Disable</MatButton>
                    }
                    else if (context.Enabled == false)
                    {
                        <MatButton Outlined="true" @onclick="@(async ()=> await EnableToken(@context.Id))">Enable</MatButton>
                    }
                    <MatButton Outlined="true" @onclick="@(async () => await RemoveToken(@context.Id))">Remove</MatButton>

                </td>
            </MatTableRow>
        </MatTable>
    </div>
    <div>
        <MatButton Raised="true" Outlined="true" @onclick="@(async () => await showGenerateTokenDialog() )">Generate New Token</MatButton>
    </div>
    <MatDialog @bind-IsOpen="@showTokenDialog">
        <MatDialogContent>
            <p>This is your JWT Token</p>
                <div class="card">
                    <div class="card-body">
                        @tokenValue
                    </div>
                </div>
        </MatDialogContent>
        <MatDialogActions>
            <MatButton @onclick="@closeTokenDialog">Close</MatButton>
        </MatDialogActions>
    </MatDialog>

    <MatDialog @bind-IsOpen="@showNewTokenDialog">
        <MatDialogTitle>Generate token for device</MatDialogTitle>
        <MatDialogContent>
            <MatSelect @bind-Value="@deviceSelectedId" Label="Select the concerned device">
                @foreach (var d in devices)
                {
                    <MatOption Value="@d.Id">@d.Name</MatOption>
                }
            </MatSelect>
        </MatDialogContent>
        <MatDialogActions>
            <MatButton Raised="true" @onclick="@GenerateToken">Generate</MatButton>
            <MatButton Outlined="true" @onclick="@( async () => hideGenerateTokenDialog())">Cancel</MatButton>
        </MatDialogActions>
    </MatDialog>
</div>
@code {
    [CascadingParameter]
    Task<AuthenticationState> authState { get; set; }

    bool showTokenDialog { get; set; } = false;
    bool showNewTokenDialog { get; set; } = false;
    string tokenValue { get; set; }


    string userId { get; set; }
    string username { get; set; }
    List<DeviceToken> deviceTokens { get; set; } = new List<DeviceToken>();
    List<Device> devices { get; set; } = new List<Device>();
    string deviceSelectedId { get; set; }

    protected override async Task OnInitAsync()
    {
        await setUserId();
        refreshDeviceTokenList();
    }
    async Task setUserId()
    {
        var taskAuth = await authState;
        var user = taskAuth.User;
        username = taskAuth.User.Identity.Name;
        userId = userAuthService.GetUserId(user);
    }
    void refreshDeviceTokenList()
    {
        deviceTokens = deviceTokensRepository.GetAllByUserId(userId);
    }
    void setTokenToShow(string tk)
    {
        tokenValue = tk;
        openTokenDialog();
    }
    void openTokenDialog()
    {
        showTokenDialog = true;
    }
    void closeTokenDialog()
    {
        showTokenDialog = false;
    }
    async Task EnableToken(string id)
    {
        await deviceTokensRepository.EnableAsync(id);
        refreshDeviceTokenList();
    }
    async Task DisableToken(string id)
    {
        await deviceTokensRepository.DisableAsync(id);
        refreshDeviceTokenList();
    }
    async Task RemoveToken(string id)
    {
        await deviceTokensRepository.RemoveAsync(id);

    }
    async Task showGenerateTokenDialog()
    {
        devices = await deviceRepository.GetDevicesAsyncByUserId(userId);
        showNewTokenDialog = true;
    }
    void hideGenerateTokenDialog()
    {
        showNewTokenDialog = false;
    }
    async Task GenerateToken()
    {
        var token = tokenService.GenerateToken(username);
        var deviceToken = new DeviceToken
        {
            Id = tokenService.IntoString(token),
            DeviceId = deviceSelectedId,
            Enabled = true,
            CreationDate = DateTime.UtcNow,
            ExpirationDate = token.ValidTo
        };
        await deviceTokensRepository.CreateAsync(deviceToken);
        hideGenerateTokenDialog();
    }
}
