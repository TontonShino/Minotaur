@page "/"

@attribute [Authorize]

@inject IUserAuthService userAuthService
@inject IDevicesRepository devicesRepository

<h3>Home page</h3>
@if (devices.Count < 1)
{
    <p>No Device Yet</p>
}
else
{
<div class="container-fluid">
    <MatTable Items="devices">
        <MatTableHeader>
            <th>Name</th>
            <th>Last IP</th>
            <th>Actions</th>
        </MatTableHeader>
        <MatTableRow>
            <td>@context.Name</td>
            @if (context.InfoIP == null)
                {

                <td>No record registered yet</td>

                }
                else
                {

                <td>@context.InfoIP.FirstOrDefault().Ip  (@context.InfoIP.FirstOrDefault().Record.ToLocalTime())</td>

                }
            <td>
                <MatButton Outlined="true" OnClick="@( async () => await showHistoryClick(context.Id))">Show history</MatButton>
            </td>
        </MatTableRow>
    </MatTable>
</div>
    <MatDialog IsOpen="showHistoryDeviceDialog">
        <MatDialogTitle>
            Device history
        </MatDialogTitle>
        <MatDialogContent>
            <MatTable Items="selectedInfoIPs">
                <MatTableHeader>
                    <th>Name</th>
                    <th>IP</th>
                    <th>Time</th>
                </MatTableHeader>
                <MatTableRow>
                    <td>@context.Device.Name</td>
                    <td>@context.Ip</td>
                    <td>@context.Record.ToLocalTime()</td>
                </MatTableRow>
            </MatTable>
        </MatDialogContent>
        <MatDialogActions>
            <MatButton OnClick="closeDeviceHistoryDialog">Close</MatButton>
        </MatDialogActions>
    </MatDialog>


}

@code
{
    [CascadingParameter]
    Task<AuthenticationState> authStateTask { get; set; }
    List<Device> devices { get; set; } = new List<Device>();
    UserInfo userInfo { get; set; } = new UserInfo();
    bool showHistoryDeviceDialog { get; set; } = false;
    List<InfoIP> selectedInfoIPs { get; set; } = new List<InfoIP>();

    protected override async Task OnInitAsync()
    {
        await setUserId();
        await setUsername();
        await refreshDevices();
    }
    async Task setUserId()
    {
        var authstate = await authStateTask;
        userInfo.UserId = userAuthService.GetUserId(authstate.User);

    }
    async Task setUsername()
    {
        var authstate = await authStateTask;
        userInfo.Username = authstate.User.Identity.Name;
    }
    async Task refreshDevices()
    {
        devices = await devicesRepository.GetDevicesLastIpAsync(userInfo.UserId);
    }

    async Task showHistoryClick(string deviceId)
    {
        selectedInfoIPs = await devicesRepository.GetDeviceHistoryAsync(deviceId);
        showHistoryDeviceDialog = true;
    }
    void closeDeviceHistoryDialog()
    {
        showHistoryDeviceDialog = false;
    }
}